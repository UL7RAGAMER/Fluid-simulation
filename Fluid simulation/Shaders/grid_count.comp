#version 430 core
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer PositionBuffer {
    vec2 positions[];
};

layout(std430, binding = 2) buffer CellCountBuffer {
    uint cellCounts[];
};

uniform uint gridDim;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= positions.length()) {
        return;
    }

    vec2 pos = positions[id];
    
    // Convert world coordinates [-1, 1] to grid coordinates [0, gridDim - 1]
    uint gridX = uint( (pos.x + 1.0) / 2.0 * gridDim );
    uint gridY = uint( (pos.y + 1.0) / 2.0 * gridDim );

    // Ensure coordinates are within bounds
    gridX = clamp(gridX, 0, gridDim - 1);
    gridY = clamp(gridY, 0, gridDim - 1);

    // Flatten 2D grid index to 1D array index
    uint cellIndex = gridY * gridDim + gridX;

    // Atomically increment the counter for this cell
    // This is safe for multiple threads to write to at the same time.
    atomicAdd(cellCounts[cellIndex], 1);
}